install.packages(c("bayesplot", "bayestestR", "callr", "commonmark", "cowplot", "curl", "data.table", "DataExplorer", "DBI", "distributional", "DT", "emmeans", "estimability", "GGally", "ggeffects", "ggfun", "ggplot2", "ggridges", "ggsci", "gmodels", "GPArotation", "httpuv", "igraph", "insight", "loo", "magick", "modelbased", "parameters", "performance", "ps", "psych", "QuickJSR", "RcppArmadillo", "RcppEigen", "rmarkdown", "roxygen2", "rstan", "rstanarm", "rstantools", "rvest", "see", "showtext", "StanHeaders", "survey", "sysfonts", "systemfonts", "tidyr", "timechange", "usethis", "V8", "viridis", "xfun", "xts", "yulab.utils", "zip"))
data <- data("InsectSprays")
data
data <- data(InsectSprays)
data
rm(list = ls())
data <- InsectSprays
InsectSprays
InsectSprays
head(data)
head(data)
# assegnare il dataset all'oggetto data
data = InsectSprays
# rinominare la variabaile dipendente in y
data$y = InsectSprays$count
# rinominare la variabile indipedente in x
data$x = InsectSprays$spray
# maggiori dettagli sulla x
table(data$x)
# grafico
plot(data$y ~ data$x)
# regressione
m = lm(y ~ x, data = data)
# summary del modello
summary(m)
m
r Sys.Date()
---
title: "Insect Project"
install.packages(c("digest", "Hmisc", "rms", "tidyselect"))
install.packages("bookdown")
# assegnare il dataset all'oggetto data
data = InsectSprays
# rinominare la variabaile dipendente in y
data$y = InsectSprays$count
# rinominare la variabile indipedente in x
data$x = InsectSprays$spray
# maggiori dettagli sulla x
table(data$x)
save.image("C:/Progetti R/RMarkdown/dati/dataset_rinominato.RData")
# assegnare il dataset all'oggetto data
data = InsectSprays
save.image("C:/Progetti R/RMarkdown/dati/dataset.RData")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
load(file = "dati/dataset.RData")
head(data)
rm(list = ls())
knitr::opts_chunk$set(echo = FALSE)
load(file = "dati/dataset_rinominato.RData")
data
data
InsectSprays
hook_output
knitr::knit_hooks$get("output")
?xcolor
??xcolor
load(file = "dati/dataset_rinominato.RData")
View(data)
knitr::opts_chunk$set(echo = FALSE)
load(file = "dati/dataset_rinominato.RData")
m = lm(y ~ x, data = data)
m0 = lm(y ~ 1, data = data)
hook_output <- knitr::knit_hooks$get("output")
knitr::knit_hooks$set(output = function(x, options) {
if (!is.null(n <- options$out.lines)) {
x <- xfun::split_lines(x)
if (length(x) > n) {
# truncate the output
x <- c(head(x, n), "....\n")
}
x <- paste(x, collapse = "\n")
}
hook_output(x, options)
})
knitr::include_graphics(path = "img/sorridenti.jpg")
knitr::include_graphics(path = "img/sad.jpg")
knitr::include_graphics(path = "img/spray1.jpeg")
knitr::include_graphics(path = "img/spray2.jpeg")
knitr::include_graphics(path = "img/spray3.png")
knitr::include_graphics(path = "img/spray4.jpg")
knitr::include_graphics(path = "img/spray5.jpg")
knitr::include_graphics(path = "img/spray6.jpg")
stargazer(InsectSprays, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 3, header=FALSE)
library(stargazer)
stargazer(InsectSprays, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 3, header=FALSE)
library(stargazer)
stargazer(InsectSprays, type="latex", summary = TRUE,
title= "Tabella di summary", digits = 3, header=FALSE, label = "tab:sum")
qqplot(InsectSprays)
qqplot(InsectSprays$count)
qqplot(data$x, data$y)
qqnorm(data$y ~ data$x)
qqnorm(data$y)
qqnorm(data)
qqnorm(data[data$x == "A",])
data[data$x == "A",]
data[data$x == "A", 1]
qqnorm(data[data$x == "A", 1])
qqnorm(data[data$x == "A", 1])
qqline(data[data$x == "A", 1])
qqnorm(data[data$x == "B", 1])
qqline(data[data$x == "B", 1])
qqnorm(data[data$x == "C", 1])
qqline(data[data$x == "C", 1])
qqnorm(data[data$x == "D", 1])
qqline(data[data$x == "D", 1])
qqnorm(data[data$x == "E", 1])
qqline(data[data$x == "E", 1])
qqnorm(data[data$x == "F", 1])
qqline(data[data$x == "F", 1])
knitr::opts_chunk$set(echo = TRUE)
load(file = "dati/dataset_rinominato.RData")
m = lm(y ~ x, data = data)
m0 = lm(y ~ 1, data = data)
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point() +
theme_bw() + theme(legend.position = "none")
library(tidyverse)
library(ggplot2)
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point() +
theme_bw() + theme(legend.position = "none")
grafico
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point(position_jitter = 0.1) +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point(position_jitter = 1) +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point(jitter = 1) +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_point() +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
knitr::asis_output(ifelse(knitr::is_html_output(), '<span style='color:red'>parola</span>', '\color{red} Voglio una frase rossa \normalcolor'))
knitr::asis_output(ifelse(knitr::is_html_output(), '<span style='color:red'>parola</span>', '\\color{red} Voglio una frase rossa \\normalcolor'))
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_jitter() +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_jitter(0.1) +
theme_bw() + theme(legend.position = "none")
?geom_jitter()
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_jitter(width = 0.25) +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
plotly::ggplotly(grafico)
grafico = ggplot(data,
aes(y=y,x=x, color =x, alpha = .5)) + geom_jitter(width = 0.15) +
theme_bw() + theme(legend.position = "none")
grafico = ggplot(data,
aes(y=y,x=x, color =x), alpha = 0.5) + geom_jitter(width = 0.15) +
theme_bw() + theme(legend.position = "none")
plotly::ggplotly(grafico)
grafico = ggplot(data,
aes(y=y,x=x, color =x)) + geom_jitter(width = 0.15, alpha = 0.5) +
theme_bw() + theme(legend.position = "none")
Sys.Date()
m = lm(y ~ x, data = data)
m0 = lm(y ~ 1, data = data)
load(file = "dati/dataset_rinominato.RData")
m = lm(y ~ x, data = data)
m0 = lm(y ~ 1, data = data)
m
plot(m0)
install.packages("perl")
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::reinstall_tinytex(repository = "illinois")
